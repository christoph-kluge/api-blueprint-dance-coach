FORMAT: 1A
HOST: https://api.test-dc.christophkluge.com

# Dance Coach

*This API blueprint is subject to change due to technology restrictions, performance optimizations or changing requirements.*

## Authentication

+ This API uses [JWT](http://jwt.io/) for authentication,
+ Every token MUST be refreshed before its expiration time,
+ Token MUST be provided in `Authorization` header,
+ Toke MUST be provided for each request that requires authentication,

> A custom scheme like "JWT" seems to be more appropriate than coercing the OAuth2 Bearer scheme.

### Example Header
```
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhNnZoQW8zRkc3dDEiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE0NzA1OTg5NzIsImV4cCI6MTQ3MDY4NTM3Mn0.ltA9zZmJKszBJuuV7pTWtY7LzLXrRUfebJDhy_jGMeM
```

## HTTP Methods

This API uses HTTP verbs (methods) as following:

+ `GET` - *Read* - used to **read** (or retrieve) a representation of a resource,
+ `POST` - *Create* - used to **create** new resources. In particular, it's used to create subordinate resources.
+ `PUT` - *Update/Replace* - used for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. On successful request, replaces identified resource with the request body.
+ `PATCH` - *Update/Modify* - used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
+ `DELETE` - *Delete* - used to **delete** a resource identified by a URI.

## Localization

This API uses `Accept-Language` header to identify the locale.

`Accept-Language: en`

## Media Type

Where applicable this API MUST use the JSON media-type. Requests with a message-body are using plain JSON to set or update resource states.

`Content-type: application/json` and `Accept: application/json` headers SHOULD be set on all requests if not stated otherwise.

## Representation of Date and Time

All exchange of date and time-related data MUST be done according to ISO 8601 standard and stored in UTC.

When returning date and time-related data `YYYY-MM-DDThh:mm:ss.SSSZ` format MUST be used. 

### Example
`2017-09-17T11:16:50.000+00:00`

## Resource IDs

This API uses non-sequential url-friendly unique ids. Every public resource id MUST be in formatted as UUID.

### Example
`2adf6271-fd23-413a-9933-5c63dcf5abb8`

## Status Codes and Errors

This API uses HTTP status codes to communicate with the API consumer.

+ `200 OK` - Response to a successful GET, PUT, PATCH or DELETE.
+ `201 Created` - Response to a POST that results in a creation.
+ `202 Accepted` - Response to a POST that processes the payload in an async way.
+ `204 No Content` - Response to a successful request that won't be returning a body (like a DELETE request).
+ `400 Bad Request` - Malformed request; form validation errors.
+ `401 Unauthorized` - When no or invalid authentication details are provided.
+ `403 Forbidden` - When authentication succeeded but authenticated user doesn't have access to the resource.
+ `404 Not Found` - When a non-existent resource is requested.
+ `405 Method Not Allowed` - Method not allowed.
+ `406 Not Acceptable` - Could not satisfy the request Accept header.
+ `409 Conflict` - Could persist a resource as we see a double commit.
+ `415 Unsupported Media Type` - Unsupported media type in request.
+ `422 Unprocessible Entity` - Form Validation Error

### Error response

This API returns both, machine-readable error codes and human-readable error messages in response body when an error is encountered.

#### Examples

##### Generic Error

```
{
    "error": "Unauthorized"
}
```

##### Validation Error

```
{
    "message": "422 Unprocessable Entity",
    "errors": {
        "last_name": [
            "last name darf nicht grösser sein als 2 Zeichen."
        ],
        "password": [
            "password muss mindestens 6 Zeichen lang sein."
        ]
    }
}
```

# Group Authentication

## User registration [/auth/register]

### Register a new user [POST]

After successful registration a confirmation email MUST be sent to provided address.

+ Request (application/json)
    + Attributes
        + email: `john.doe@mail.com` (string, required) - E-mail address.
        + password: `john-does-password` (string, required) - User password.
        + first_name: `Dance` (string) - Firstname of the user.
        + last_name: `Coach` (string) - Lastname of the user.

+ Response 200 (application/json)
    + Attributes (Auth Token)
    
+ Response 422 (application/json)
    
        {
            "message": "422 Unprocessable Entity",
            "errors": {
                "last_name": [
                    "last name darf nicht grösser sein als 2 Zeichen."
                ],
                "password": [
                    "password muss mindestens 6 Zeichen lang sein."
                ]
            },
            "status_code": 422
        }

## User Login [/auth/login]

### Retrieve a token by credentials [POST]

Allows to retrieve a valid JSON Web Token for username and password.

+ Request (application/json)
    + Attributes
        + login: `john.doe@mail.com` (string, required) - User email address
        + password: `QXR0mi38a2` (string, required) - User password

+ Response 200 (application/json)
    + Attributes (Auth Token)
    
+ Response 401 (application/json)
    
        {
            "error": "Unauthorized"
        }

## Facebook Authentication [/auth/login/facebook]

### Retrieve a token by facebook login [POST]

+ Request (application/json)
    + Attributes
        + code: `facebook-token-is-cool` (string, required) - User email address

+ Response 200 (application/json)
    + Attributes (Auth Token)
    
## Refresh expired token [/auth/login/refresh]

### Refresh expired auth token [POST]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <token>

+ Response 200 (application/json)
    + Attributes (Auth Token)
    
+ Response 401 (application/json)

        {
            "message": "Failed to authenticate because of bad credentials or an invalid authorization header.",
            "status_code": 401
        }
    
+ Response 401 (application/json)

        {
            "message": "Token Signature could not be verified.",
            "status_code": 401
        }
        
+ Response 401 (application/json)

        {
            "message": "The token has been blacklisted",
            "status_code": 401
        }


# Group User Account Actions

## Current user profile [/users/me]

### Retrieve profile of the current user [GET]

Retrieves the profile of the current user.

+ Request

    + Headers
    
            Authorization: Bearer <token>

+ Response 200 (application/json)
    + Attributes (User)

## (work-in-progress) User password [/users/me/password]

### Change the user password [PUT]

After password is changed all access tokens issued for this user prior to password change must be invalidated.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <token>
            
    + Attributes
        + old_password: `secret` (string, required)
        + new_password: `new-secret` (string, required)

+ Response 200
    + Attributes (Auth Token)

# Data Structures

## Auth Token (object)
+ access_token: `AAA.BBB.CCC` (string, required) - JWT Token
+ token_type: `bearer` (string, required) - Authorization Token Type
+ expires_in: `3600` (number, required) - Expiration time for this generated token

## Resource (object)
+ createdAt: `2016-07-01T15:11:09.553Z` (string) - ISO Date/time string. When this resource was created.
+ updatedAt: `2016-07-01T15:11:09.553Z` (string) - ISO Date/time string. When this resource was last updated.

## Public Resource (Resource)
+ id: `60197d80-b642-4cf3-a4f2-76d82f864900` (string, fixed) - non-sequential url-friendly unique id.

## User (Resource)
+ name: `John Doe` (string, required, nullable) - Full name of the user.
+ first_name: `John` (string, required, nullable) - First name of the user.
+ last_name: `Doe` (string, required, nullable) - Last name of the user.
+ email: `john.doe@mail.com` (string, required) - Login. Unique email address of the user.
+ avatar_url: `http://example.net/my/facebook/image.png` (string, required, nullable) - Avatar url

## Plan Endurance (object)
+ method: `running,skipping` (enum[string], required) - type of endurance training
+ total: `2` (number, required) - amount of endurance training per week
+ duration: `2` (number, required) - duration of each endurance training

## Plan Finals (object)
+ total: `2` (number, required) - amount of finals per week
+ iteration: `2` (number, required) - amount of finals per training

## Plan HeartRate (object)
+ low: `60` (number, required) - heart rate at low interaction
+ high: `160` (number, required) - hearth rate at high interaction

## Plan Write (object)
+ name: `Mein Trainingsplan 1` (string, required) - name of the practice plan
+ startDate: `2017-10-01` (string, required) - start date of the practice plan
+ endurance: Plan Endurance, required - endurance settings
+ finals: Plan Finals, required - final settings
+ heartrate: Plan HeartRate, required - heart rate settings

## Plan Read (Public Resource)
+ name: `Mein Trainingsplan 1` (string, required) - name of the practice plan
+ startDate: `2017-10-01` (string, required) - start date of the practice plan
+ endDate: `2017-12-01` (string, required) - start date of the practice plan
+ endurance: Plan Endurance, required - endurance settings
+ finals: Plan Finals, required - final settings
+ heartrate: Plan HeartRate, required - heart rate settings